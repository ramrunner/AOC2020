(import (chicken string)
        (chicken io)
        (chicken format) 
        (chicken sort)
        binary-search)

(define (simloop ilist acc ip visited iflipped first)
  (format #t "acc: ~A ip: ~A iflipped:~A~%" acc ip iflipped)
  (if (> ip (length ilist))
        (simloop ilist 0 0 '(-1) iflipped #t))
  (if (= ip (length ilist)) 
      (format #t "successful term! by flipping ~A" iflipped)
  
    (let* ((ins (list-ref ilist ip))
           (opcode (car (string-split ins)))
           (opval (cadr (string-split ins))))
    (if (and first (eq? #f (member ip iflipped)))
        (begin 
        (set! first #f)
        (cond  ((string=? opcode "nop") (set! opcode "jmp"))
               ((string=? opcode "jmp") (set! opcode "nop")))
          (set! iflipped (append iflipped (list ip)))))
    (cond ((not (eq? #f (binary-search visited (lambda (e) (- ip e))))) (begin (format #t "restarting %") (simloop ilist 0 0 '(-1) iflipped #t)))
           ((string=? opcode "nop") (simloop ilist acc (+ 1 ip) (sort (append visited (list ip)) <) iflipped first))
           ((string=? opcode "acc") (simloop ilist (+ acc (string->number opval)) (+ 1 ip) (sort (append visited (list ip)) <) iflipped first))
           ((string=? opcode "jmp") (simloop ilist acc (+ ip (string->number opval)) (sort (append visited (list ip)) <) iflipped first))
           (else (format #t "notreachable~%"))))))

(call-with-input-file "inputs/big" (lambda (p) (let ((ins (read-lines p))) (simloop ins 0 1 '(-1) '(-1) #t))))
